{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,yBAA0B;AAC1B,yCAA0C;AAC1C,6BAA8B;AAC9B,kCAAmC;AAEnC;;;;;GAKG;AACH,SAAS,iBAAiB,CAAC,OAAgB;IAE1C,IAAI,CAAC,OAAO,EACZ;QACC,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;KACxB;IAED,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAE/C,IAAI,QAAQ,GAAW,IAAI,CAAC;IAC5B,IAAI,OAAO,GAAW,OAAO,CAAC;IAE9B,GACA;QACC,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,UAAU,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,UAAU,EACd;YACC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACrD,IAAI,YAAY,KAAK,EAAE,IAAI,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,EAC5E;gBACC,OAAO,OAAO,CAAC;aACf;iBAED;gBACC,OAAO,IAAI,CAAC;aACZ;SACD;QAED,QAAQ,GAAG,OAAO,CAAC;QACnB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KAChC,QACM,OAAO,KAAK,QAAQ,EAAE;IAE7B,OAAO,IAAI,CAAC;AACb,CAAC;AAUD,SAAS,iBAAiB,CAAC,QAE1B;IAEA,MAAM,UAAU,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,UAAU,CAAC;IAC/C,OAAO,CAAC,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AAC/F,CAAC;AAED,SAAS,eAAe,CAErB,GAAW;IAEb,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IAC5C,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EACvB;QACC,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;KACjD;IACD,OAAO,IAAI,CAAC;AACb,CAAC;AAED,iBAAiB,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AACxD,iBAAiB,CAAC,eAAe,GAAG,eAAe,CAAC;AACpD,iBAAiB,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AACxD,iBAAiB,CAAC,OAAO,GAAG,iBAAiB,CAAC;AAE9C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAEjC,iBAAS,iBAAiB,CAAC","sourcesContent":["'use strict';\n\nimport fs = require('fs');\nimport micromatch = require('micromatch');\nimport path = require('path');\nimport pkgDir = require('pkg-dir');\n\n/**\n * Adapted from:\n * https://github.com/yarnpkg/yarn/blob/ddf2f9ade211195372236c2f39a75b00fa18d4de/src/config.js#L612\n * @param {string} [initial]\n * @return {string|null}\n */\nfunction findWorkspaceRoot(initial?: string): string\n{\n\tif (!initial)\n\t{\n\t\tinitial = process.cwd();\n\t}\n\n\tinitial = path.normalize(pkgDir.sync(initial));\n\n\tlet previous: string = null;\n\tlet current: string = initial;\n\n\tdo\n\t{\n\t\tconst manifest = readPackageJSON(current);\n\t\tconst workspaces = extractWorkspaces(manifest);\n\n\t\tif (workspaces)\n\t\t{\n\t\t\tconst relativePath = path.relative(current, initial);\n\t\t\tif (relativePath === '' || micromatch([relativePath], workspaces).length > 0)\n\t\t\t{\n\t\t\t\treturn current;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tprevious = current;\n\t\tcurrent = path.dirname(current);\n\t}\n\twhile (current !== previous);\n\n\treturn null;\n}\n\nfunction extractWorkspaces<T extends string[]>(manifest: {\n\tworkspaces?: {\n\t\tpackages: T\n\t}\n}): T\nfunction extractWorkspaces<T extends string[]>(manifest: {\n\tworkspaces?: T\n}): T\nfunction extractWorkspaces(manifest: {\n\tworkspaces?: any\n})\n{\n\tconst workspaces = (manifest || {}).workspaces;\n\treturn (workspaces && workspaces.packages) || (Array.isArray(workspaces) ? workspaces : null);\n}\n\nfunction readPackageJSON<T extends {\n\tworkspaces?: any\n}>(dir: string): T\n{\n\tconst file = path.join(dir, 'package.json');\n\tif (fs.existsSync(file))\n\t{\n\t\treturn JSON.parse(fs.readFileSync(file, 'utf8'));\n\t}\n\treturn null;\n}\n\nfindWorkspaceRoot.findWorkspaceRoot = findWorkspaceRoot;\nfindWorkspaceRoot.readPackageJSON = readPackageJSON;\nfindWorkspaceRoot.extractWorkspaces = extractWorkspaces;\nfindWorkspaceRoot.default = findWorkspaceRoot;\n\nObject.freeze(findWorkspaceRoot);\n\nexport = findWorkspaceRoot;\n"]}
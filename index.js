'use strict';
const fs = require("fs");
const micromatch = require("micromatch");
const path = require("path");
const pkgDir = require("pkg-dir");
/**
 * Adapted from:
 * https://github.com/yarnpkg/yarn/blob/ddf2f9ade211195372236c2f39a75b00fa18d4de/src/config.js#L612
 * @param {string} [initial]
 * @return {string|null}
 */
function findWorkspaceRoot(initial) {
    if (!initial) {
        initial = process.cwd();
    }
    initial = path.normalize(pkgDir.sync(initial));
    let previous = null;
    let current = initial;
    do {
        const manifest = readPackageJSON(current);
        const workspaces = extractWorkspaces(manifest);
        if (workspaces) {
            const relativePath = path.relative(current, initial);
            if (relativePath === '' || matchWorkspaces(relativePath, workspaces)) {
                return current;
            }
            else {
                return null;
            }
        }
        previous = current;
        current = path.dirname(current);
    } while (current !== previous);
    return null;
}
function matchWorkspaces(relativePath, workspaces) {
    return micromatch([relativePath], workspaces).length > 0;
}
function extractWorkspaces(manifest) {
    const workspaces = (manifest || {}).workspaces;
    return (workspaces && workspaces.packages) || (Array.isArray(workspaces) ? workspaces : null);
}
function readPackageJSON(dir) {
    const file = path.join(dir, 'package.json');
    if (fs.existsSync(file)) {
        return JSON.parse(fs.readFileSync(file, 'utf8'));
    }
    return null;
}
findWorkspaceRoot.findWorkspaceRoot = findWorkspaceRoot;
findWorkspaceRoot.readPackageJSON = readPackageJSON;
findWorkspaceRoot.extractWorkspaces = extractWorkspaces;
findWorkspaceRoot.matchWorkspaces = matchWorkspaces;
findWorkspaceRoot.default = findWorkspaceRoot;
Object.freeze(findWorkspaceRoot);
module.exports = findWorkspaceRoot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYix5QkFBMEI7QUFDMUIseUNBQTBDO0FBQzFDLDZCQUE4QjtBQUM5QixrQ0FBbUM7QUFFbkM7Ozs7O0dBS0c7QUFDSCxTQUFTLGlCQUFpQixDQUFDLE9BQWdCO0lBRTFDLElBQUksQ0FBQyxPQUFPLEVBQ1o7UUFDQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRS9DLElBQUksUUFBUSxHQUFXLElBQUksQ0FBQztJQUM1QixJQUFJLE9BQU8sR0FBVyxPQUFPLENBQUM7SUFFOUIsR0FDQTtRQUNDLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQyxJQUFJLFVBQVUsRUFDZDtZQUNDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3JELElBQUksWUFBWSxLQUFLLEVBQUUsSUFBSSxlQUFlLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxFQUNwRTtnQkFDQyxPQUFPLE9BQU8sQ0FBQzthQUNmO2lCQUVEO2dCQUNDLE9BQU8sSUFBSSxDQUFDO2FBQ1o7U0FDRDtRQUVELFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEMsUUFDTSxPQUFPLEtBQUssUUFBUSxFQUFFO0lBRTdCLE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFlBQW9CLEVBQUUsVUFBb0I7SUFFbEUsT0FBTyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBQ3pELENBQUM7QUFVRCxTQUFTLGlCQUFpQixDQUFDLFFBRTFCO0lBRUEsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBRUQsU0FBUyxlQUFlLENBRXJCLEdBQVc7SUFFYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM1QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQ3ZCO1FBQ0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDakQ7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFFRCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQUN4RCxpQkFBaUIsQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3BELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQ3hELGlCQUFpQixDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDcEQsaUJBQWlCLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVqQyxpQkFBUyxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBtaWNyb21hdGNoID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgcGtnRGlyID0gcmVxdWlyZSgncGtnLWRpcicpO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS95YXJucGtnL3lhcm4vYmxvYi9kZGYyZjlhZGUyMTExOTUzNzIyMzZjMmYzOWE3NWIwMGZhMThkNGRlL3NyYy9jb25maWcuanMjTDYxMlxuICogQHBhcmFtIHtzdHJpbmd9IFtpbml0aWFsXVxuICogQHJldHVybiB7c3RyaW5nfG51bGx9XG4gKi9cbmZ1bmN0aW9uIGZpbmRXb3Jrc3BhY2VSb290KGluaXRpYWw/OiBzdHJpbmcpOiBzdHJpbmdcbntcblx0aWYgKCFpbml0aWFsKVxuXHR7XG5cdFx0aW5pdGlhbCA9IHByb2Nlc3MuY3dkKCk7XG5cdH1cblxuXHRpbml0aWFsID0gcGF0aC5ub3JtYWxpemUocGtnRGlyLnN5bmMoaW5pdGlhbCkpO1xuXG5cdGxldCBwcmV2aW91czogc3RyaW5nID0gbnVsbDtcblx0bGV0IGN1cnJlbnQ6IHN0cmluZyA9IGluaXRpYWw7XG5cblx0ZG9cblx0e1xuXHRcdGNvbnN0IG1hbmlmZXN0ID0gcmVhZFBhY2thZ2VKU09OKGN1cnJlbnQpO1xuXHRcdGNvbnN0IHdvcmtzcGFjZXMgPSBleHRyYWN0V29ya3NwYWNlcyhtYW5pZmVzdCk7XG5cblx0XHRpZiAod29ya3NwYWNlcylcblx0XHR7XG5cdFx0XHRjb25zdCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKGN1cnJlbnQsIGluaXRpYWwpO1xuXHRcdFx0aWYgKHJlbGF0aXZlUGF0aCA9PT0gJycgfHwgbWF0Y2hXb3Jrc3BhY2VzKHJlbGF0aXZlUGF0aCwgd29ya3NwYWNlcykpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRwcmV2aW91cyA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IHBhdGguZGlybmFtZShjdXJyZW50KTtcblx0fVxuXHR3aGlsZSAoY3VycmVudCAhPT0gcHJldmlvdXMpO1xuXG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBtYXRjaFdvcmtzcGFjZXMocmVsYXRpdmVQYXRoOiBzdHJpbmcsIHdvcmtzcGFjZXM6IHN0cmluZ1tdKVxue1xuXHRyZXR1cm4gbWljcm9tYXRjaChbcmVsYXRpdmVQYXRoXSwgd29ya3NwYWNlcykubGVuZ3RoID4gMFxufVxuXG5mdW5jdGlvbiBleHRyYWN0V29ya3NwYWNlczxUIGV4dGVuZHMgc3RyaW5nW10+KG1hbmlmZXN0OiB7XG5cdHdvcmtzcGFjZXM/OiB7XG5cdFx0cGFja2FnZXM6IFRcblx0fVxufSk6IFRcbmZ1bmN0aW9uIGV4dHJhY3RXb3Jrc3BhY2VzPFQgZXh0ZW5kcyBzdHJpbmdbXT4obWFuaWZlc3Q6IHtcblx0d29ya3NwYWNlcz86IFRcbn0pOiBUXG5mdW5jdGlvbiBleHRyYWN0V29ya3NwYWNlcyhtYW5pZmVzdDoge1xuXHR3b3Jrc3BhY2VzPzogYW55XG59KVxue1xuXHRjb25zdCB3b3Jrc3BhY2VzID0gKG1hbmlmZXN0IHx8IHt9KS53b3Jrc3BhY2VzO1xuXHRyZXR1cm4gKHdvcmtzcGFjZXMgJiYgd29ya3NwYWNlcy5wYWNrYWdlcykgfHwgKEFycmF5LmlzQXJyYXkod29ya3NwYWNlcykgPyB3b3Jrc3BhY2VzIDogbnVsbCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQYWNrYWdlSlNPTjxUIGV4dGVuZHMge1xuXHR3b3Jrc3BhY2VzPzogYW55XG59PihkaXI6IHN0cmluZyk6IFRcbntcblx0Y29uc3QgZmlsZSA9IHBhdGguam9pbihkaXIsICdwYWNrYWdlLmpzb24nKTtcblx0aWYgKGZzLmV4aXN0c1N5bmMoZmlsZSkpXG5cdHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0ZjgnKSk7XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG5cbmZpbmRXb3Jrc3BhY2VSb290LmZpbmRXb3Jrc3BhY2VSb290ID0gZmluZFdvcmtzcGFjZVJvb3Q7XG5maW5kV29ya3NwYWNlUm9vdC5yZWFkUGFja2FnZUpTT04gPSByZWFkUGFja2FnZUpTT047XG5maW5kV29ya3NwYWNlUm9vdC5leHRyYWN0V29ya3NwYWNlcyA9IGV4dHJhY3RXb3Jrc3BhY2VzO1xuZmluZFdvcmtzcGFjZVJvb3QubWF0Y2hXb3Jrc3BhY2VzID0gbWF0Y2hXb3Jrc3BhY2VzO1xuZmluZFdvcmtzcGFjZVJvb3QuZGVmYXVsdCA9IGZpbmRXb3Jrc3BhY2VSb290O1xuXG5PYmplY3QuZnJlZXplKGZpbmRXb3Jrc3BhY2VSb290KTtcblxuZXhwb3J0ID0gZmluZFdvcmtzcGFjZVJvb3Q7XG4iXX0=